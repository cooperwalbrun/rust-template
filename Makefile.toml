####################################################################################################
#################################### Lint/format-related tasks #####################################
####################################################################################################

[tasks.format]
description = "Format all source files."
install_crate = { rustup_component_name = "rustfmt" }
command = "cargo"
args = ["fmt"]

[tasks.lint]
description = "Lint all source files."
install_crate = { rustup_component_name = "clippy" }
command = "cargo"
args = ["clippy"]

[tasks.lint-watch]
description = "Monitor and lint all source files continuously anytime one of them changes."
dependencies = ["lint"]
watch = true

####################################################################################################
############################## Non-Miri build/run/test-related tasks ###############################
####################################################################################################

[tasks.clean]
description = "Clean up temporary files generated by the Rust compiler."
command = "cargo"
args = ["clean"]

[tasks.build]
description = "Compile the source code and create testable artifacts."
command = "cargo"
args = ["build"]
dependencies = ["lint"]

[tasks.run]
description = "Run the application."
env = { RUST_BACKTRACE = 1 }
command = "cargo"
args = ["run"]
dependencies = ["build"]

[tasks.test]
description = "Run all unit tests."
env = { RUST_BACKTRACE = 1 }
command = "cargo"
args = ["test", "--tests"]
dependencies = ["build"]

[tasks.test-coverage]
description = "Run code coverage analysis and write a tabulated report to STDOUT."
install_crate = "cargo-llvm-cov"
env = { RUST_BACKTRACE = 1 }
command = "cargo"
args = ["llvm-cov"]
dependencies = ["build"]

####################################################################################################
################################ Miri-related build/run/test tasks #################################
####################################################################################################

# In all of the tasks below, we use an alternative target directory (CARGO_TARGET_DIR) based on the
# discussion here: https://issueexplorer.com/issue/rust-lang/miri/1869

[tasks.miri-clean]
description = "Clean up temporary files generated by the Rust compiler."
env = { CARGO_TARGET_DIR = "./target-miri" }
command = "cargo"
args = ["clean"]

[tasks.miri-compatible-build]
description = "Fetch the Miri Rustup component and create a Miri-compatible build."
install_crate = { rustup_component_name = "miri" }
env = { CARGO_TARGET_DIR = "./target-miri" }
command = "cargo"
args = ["build"]

[tasks.miri-run]
description = "Run the application and analyze it with Miri."
# We set -Zmiri-disable-isolation so that RUST_BACKTRACE actually gets passed in
env = { CARGO_TARGET_DIR = "./target-miri", RUST_BACKTRACE = 1, MIRIFLAGS = "-Zmiri-disable-isolation" }
command = "cargo"
args = ["miri", "run"]
dependencies = ["miri-compatible-build"]

[tasks.miri-test]
description = "Run all unit tests and analyze them with Miri."
# We set -Zmiri-disable-isolation so that RUST_BACKTRACE actually gets passed in
env = { CARGO_TARGET_DIR = "./target-miri", RUST_BACKTRACE = 1, MIRIFLAGS = "-Zmiri-disable-isolation" }
command = "cargo"
args = ["miri", "test", "--tests"]
dependencies = ["miri-compatible-build"]
